def digitsum(n):
    s = 0
    while n>0:
        s += n%10
        n = n//10
    return s

def change(n):
    times = 0
    while n > 9:
        times += 1
        n = digitsum(n)
    return n,times
data = {(5, 9): (5, 0), (4, 7): (2, 2), (1, 3): (1, 0), (9, 1): (1, 2), (4, 8): (2, 2), (5, 6): (2, 2), (2, 8): (1, 2), (9, 8): (5, 2), (7, 8): (4, 2), (5, 4): (3, 2), (2, 1): (1, 2), (8, 9): (8, 0), (6, 2): (1, 2), (1, 6): (1, 0), (9, 4): (3, 2), (5, 1): (1, 2), (3, 7): (1, 2), (2, 5): (2, 0), (8, 5): (4, 2), (5, 8): (3, 2), (1, 2): (1, 0), (7, 4): (2, 2), (9, 5): (5, 2), (4, 9): (4, 0), (3, 3): (3, 0), (2, 9): (2, 0), (8, 1): (1, 2), (7, 6): (4, 2), (4, 4): (2, 2), (6, 3): (3, 2), (1, 5): (1, 0), (8, 8): (4, 2), (7, 2): (2, 2), (3, 6): (3, 0), (2, 2): (1, 2), (7, 7): (3, 2), (5, 7): (3, 2), (5, 3): (2, 2), (4, 1): (1, 2), (1, 1): (1, 0), (9, 7): (3, 2), (6, 4): (1, 2), (3, 2): (2, 2), (2, 6): (2, 0), (6, 6): (3, 2), (8, 2): (1, 2), (7, 1): (1, 2), (4, 5): (4, 0), (7, 9): (7, 0), (8, 6): (2, 2), (5, 5): (1, 2), (1, 4): (1, 0), (6, 7): (2, 2), (3, 9): (3, 0), (2, 3): (2, 0), (1, 9): (1, 0), (8, 7): (4, 2), (6, 8): (3, 2), (9, 3): (3, 2), (4, 2): (1, 2), (9, 6): (3, 2), (6, 5): (2, 2), (3, 5): (3, 0), (2, 7): (2, 0), (6, 9): (6, 0), (7, 3): (1, 2), (4, 6): (1, 2), (9, 2): (2, 2), (5, 2): (2, 2), (6, 1): (1, 2), (3, 1): (1, 2), (9, 9): (9, 0), (3, 8): (2, 2), (1, 8): (1, 0), (7, 5): (3, 2), (4, 3): (1, 2), (1, 7): (1, 0), (8, 3): (2, 2), (3, 4): (2, 2), (2, 4): (1, 2), (8, 4): (2, 2)}

data = {(1, 1) :(1, 0),
(1, 2) :(1, 0),
(1, 3) :(1, 0),
(1, 4) :(1, 0),
(1, 5) :(1, 0),
(1, 6) :(1, 0),
(1, 7) :(1, 0),
(1, 8) :(1, 0),
(1, 9) :(1, 0),
(2, 1) :(1, 2),
(2, 2) :(1, 2),
(2, 3) :(2, 0),
(2, 4) :(1, 2),
(2, 5) :(2, 0),
(2, 6) :(2, 0),
(2, 7) :(2, 0),
(2, 8) :(1, 2),
(2, 9) :(2, 0),
(3, 1) :(1, 2),
(3, 2) :(2, 2),
(3, 3) :(3, 0),
(3, 4) :(2, 2),
(3, 5) :(3, 0),
(3, 6) :(3, 0),
(3, 7) :(1, 2),
(3, 8) :(2, 2),
(3, 9) :(3, 0),
(4, 1) :(1, 2),
(4, 2) :(1, 2),
(4, 3) :(1, 2),
(4, 4) :(2, 2),
(4, 5) :(4, 0),
(4, 6) :(1, 2),
(4, 7) :(2, 2),
(4, 8) :(2, 2),
(4, 9) :(4, 0),
(5, 1) :(1, 2),
(5, 2) :(2, 2),
(5, 3) :(2, 2),
(5, 4) :(3, 2),
(5, 5) :(1, 2),
(5, 6) :(2, 2),
(5, 7) :(3, 2),
(5, 8) :(3, 2),
(5, 9) :(5, 0),
(6, 1) :(1, 2),
(6, 2) :(1, 2),
(6, 3) :(3, 2),
(6, 4) :(1, 2),
(6, 5) :(2, 2),
(6, 6) :(3, 2),
(6, 7) :(2, 2),
(6, 8) :(3, 2),
(6, 9) :(6, 0),
(7, 1) :(1, 2),
(7, 2) :(2, 2),
(7, 3) :(1, 2),
(7, 4) :(2, 2),
(7, 5) :(3, 2),
(7, 6) :(4, 2),
(7, 7) :(3, 2),
(7, 8) :(4, 2),
(7, 9) :(7, 0),
(8, 1) :(1, 2),
(8, 2) :(1, 2),
(8, 3) :(2, 2),
(8, 4) :(2, 2),
(8, 5) :(4, 2),
(8, 6) :(2, 2),
(8, 7) :(4, 2),
(8, 8) :(4, 2),
(8, 9) :(8, 0),
(9, 1) :(1, 2),
(9, 2) :(2, 2),
(9, 3) :(3, 2),
(9, 4) :(3, 2),
(9, 5) :(5, 2),
(9, 6) :(3, 2),
(9, 7) :(3, 2),
(9, 8) :(5, 2),
(9, 9) :(9, 0)}

for t in range(int(input())):
    n,d = map(int,input().split())
    n,times = change(n)
    d,times1 = change(d)
    times += times1
    n,times1 = data[n,d]
#    n,times1 = data.get(n,d)#d[n,d]
    times += times1
    print("%s %s"%(n,times))
"""    min_n,min_i = n,0
    _j = 0
    for i in range(1,10):
        k,j = change(n+i*d)
        if min_n > k:
            print(k,j)
            min_n = k
            _j = j
            min_i = i
        if min_n == 1:
            break"""
#    print(times)
    #print("%s %s"%(min_n,times+_j+min_i))

for _ in range(int(input())):
    n,d = map(int,input().split())

